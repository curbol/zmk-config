// Editor: https://nickcoutsos.github.io/keymap-editor/
// Reference: https://github.com/urob/zmk-config

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/* Global defaults */

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/* Home Row Mods */
// Hack: Make HRM combos tap-only (cf, ZMK issue #544).

#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Encoders */

&left_encoder { steps = <60>; };

&right_encoder { steps = <60>; };

&sensors { triggers-per-rotation = <30>; };

/* Keymap */

/ {
    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        /* Home Row Mods */

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <53 54 55 56 44 30 18 45 31 19 20 32 46 47 33 21 48 34 22 57 52>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <54 53 55 56 57 41 29 17 40 28 16 39 27 15 38 26 14 37 25 13 52>;
        };

        // Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp COMMA>, <&comma_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER_MORPH";
            bindings = <&kp SEMI>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp DOT>, <&dot_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_INNER_MORPH";
            bindings = <&kp COLON>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // Tap: qmark | Shift + tap: excl.

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QEXCL";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: left/right parenthesis | Shft + tap: less-than/greater-than.

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LPAR>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: esc | Shift + tap: bspc | Ctrl + shift + tap: del.

        esc_morph: esc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_MORPH";
            bindings = <&kp ESC>, <&esc_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        esc_inner_morph: esc_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_INNER_MORPH";
            bindings = <&kp BSPC>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            keep-mods = <(MOD_RSFT)>;
        };

        // Tap: space | Shift + tap: tab | Hold: nav layer.

        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPC_MORPH";
            bindings = <&kp SPACE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&spc_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        // Tap: BT_CLR | Shift + tap: BT_CLR_ALL.

        bt_clr: bt_clr {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_CLR";
            bindings = <&bt BT_CLR>, <&bt BT_CLR_ALL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: sticky-shift | Shift + tap: caps_word | Hold: shift.

        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_SHIFT";
            bindings = <&kp>, <&magic_shift_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        magic_shift_tap: magic_shift_tap {
            compatible = "zmk,behavior-mod-morph";
            label = "MAGIC_SHIFT_TAP";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <4 5>;
            then-layer = <6>;
        };
    };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <38 39>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <39 40>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &kp COLON &kp W &kp A &kp ENTER>;
            label = "VIM_SAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "base";
            bindings = <
&trans     &trans          &trans         &trans          &trans          &trans                                  &trans                &trans          &trans          &trans         &trans            &trans
&trans     &kp Q           &kp W          &kp E           &kp R           &kp T                                   &kp Y                 &kp U           &kp I           &kp O          &kp P             &trans
&kp GRAVE  &hrm_l LMETA A  &hrm_l LALT S  &hrm_l LSHFT D  &hrm_l LCTRL F  &kp G                                   &kp H                 &hrm_r LCTRL J  &hrm_r RSHFT K  &hrm_r LALT L  &hrm_r LMETA SQT  &kp MINUS
&trans     &kp Z           &kp X          &kp C           &kp V           &kp B       &kp C_PP       &kp C_SLEEP  &kp N                 &kp M           &comma_morph    &dot_morph     &qexcl            &trans
                           &trans         &trans          &trans          &esc_morph  &lt_spc 4 0    &lt 5 ENTER  &magic_shift LSHFT 0  &trans          &trans          &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        graphite_layer {
            display-name = "graphite";
            bindings = <
&trans     &trans          &trans         &trans          &trans          &trans                                  &trans                &trans          &trans          &trans         &trans          &trans
&trans     &kp B           &kp L          &kp D           &kp W           &kp Z                                   &kp SQT               &kp F           &kp O           &kp U          &kp J           &trans
&kp GRAVE  &hrm_l LMETA N  &hrm_l LALT R  &hrm_l LSHFT T  &hrm_l LCTRL S  &kp G                                   &kp Y                 &hrm_r LCTRL H  &hrm_r RSHFT A  &hrm_r LALT E  &hrm_r LMETA I  &kp MINUS
&trans     &kp Q           &kp X          &kp M           &kp C           &kp V       &kp C_PP       &kp C_SLEEP  &kp K                 &kp P           &comma_morph    &dot_morph     &qexcl          &trans
                           &trans         &trans          &trans          &esc_morph  &lt_spc 4 0    &lt 5 ENTER  &magic_shift LSHFT 0  &trans          &trans          &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        gaming_layer {
            display-name = "game";
            bindings = <
&trans   &trans     &trans  &trans  &trans    &trans                            &trans                &trans          &trans          &trans         &trans             &trans
&trans   &kp TAB    &kp Q   &kp W   &kp E     &kp R                             &kp Y                 &kp U           &kp I           &kp O          &kp P              &trans
&kp ESC  &kp LSHFT  &kp A   &kp S   &kp D     &kp F                             &kp H                 &hrm_r LCTRL J  &hrm_r RSHFT K  &hrm_r LALT L  &hrm_r LMETA APOS  &kp MINUS
&trans   &kp LCTRL  &kp Z   &kp X   &kp C     &kp V   &kp C_PP     &kp C_SLEEP  &kp N                 &kp M           &comma_morph    &dot_morph     &qexcl             &trans
                    &trans  &trans  &kp LALT  &sl 3   &kp SPACE    &lt 5 ENTER  &magic_shift LSHFT 0  &trans          &trans          &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        gaming2_layer {
            display-name = "game2";
            bindings = <
&trans   &trans     &trans  &trans  &trans    &trans                            &trans                &trans  &trans        &trans      &trans    &trans
&trans   &kp TAB    &kp N4  &kp N5  &kp N6    &kp T                             &kp Y                 &kp U   &kp I         &kp O       &kp P     &trans
&kp ESC  &kp LSHFT  &kp N1  &kp N2  &kp N3    &kp G                             &kp H                 &kp J   &kp K         &kp L       &kp APOS  &kp MINUS
&trans   &kp LCTRL  &kp N7  &kp N8  &kp N9    &kp B   &kp C_PP     &kp C_SLEEP  &kp N                 &kp M   &comma_morph  &dot_morph  &qexcl    &trans
                    &trans  &trans  &kp LALT  &to 2   &kp SPACE    &lt 5 ENTER  &magic_shift LSHFT 0  &trans  &trans        &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        symbol_layer {
            display-name = "sym";
            bindings = <
&trans  &trans    &trans    &trans    &trans     &trans                    &trans  &trans     &trans    &trans     &trans     &trans
&trans  &kp AT    &kp HASH  &kp AMPS  &kp STAR   &trans                    &trans  &kp CARET  &kp DLLR  &kp PRCNT  &kp TILDE  &trans
&trans  &trans    &lpar_lt  &rpar_gt  &kp PLUS   &trans                    &trans  &kp EQUAL  &kp LBKT  &kp RBKT   &trans     &trans
&trans  &kp BSLH  &trans    &kp PIPE  &kp MINUS  &trans  &trans    &trans  &trans  &kp UNDER  &trans    &trans     &kp FSLH   &trans
                  &trans    &trans    &trans     &trans  &trans    &trans  &trans  &trans     &trans    &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        num_nav_layer {
            display-name = "numnav";
            bindings = <
&trans  &trans           &trans          &trans           &trans           &trans                    &trans    &trans     &trans     &trans     &trans  &trans
&trans  &trans           &kp N4          &kp N5           &kp N6           &trans                    &trans    &kp HOME   &kp END    &trans     &trans  &trans
&trans  &hrm_l LMETA N0  &hrm_l LALT N1  &hrm_l LSHFT N2  &hrm_l LCTRL N3  &trans                    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans  &trans
&trans  &trans           &kp N7          &kp N8           &kp N9           &trans  &trans    &trans  &trans    &kp PG_DN  &kp PG_UP  &vim_save  &trans  &trans
                         &trans          &trans           &trans           &trans  &trans    &trans  &trans    &trans     &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        function_layer {
            display-name = "func";
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                    &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans                    &bt BT_PRV    &trans        &trans        &bt BT_NXT    &trans        &trans
&trans  &kp F10  &kt F1  &kp F2  &kp F3  &trans  &trans    &trans  &trans        &tog 2        &tog 1        &trans        &bt_clr       &trans
                 &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans
            >;
        };
    };
};
