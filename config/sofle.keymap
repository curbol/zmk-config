#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/helper.h"

/* #define DEF 0 */
/* #define NAV 1 */
/* #define FN 2 */
/* #define NUM 3 */
/* #define SYS 4 */
/* #define MOUSE 5 */

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#ifndef LH2
  #define THUMBS LH1 LH0 RH0 RH1         // Thumbs on 34 keys.
#else
  #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.
#endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Mouse emulation */
#include "mouse.dtsi"

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// ----------------------------------------------------------------------------------------------

&left_encoder { steps = <60>; };

&right_encoder { steps = <60>; };

&sensors { triggers-per-rotation = <30>; };

/ {
    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <5 3>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <37 48>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <14 15>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <38 39>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <39 40>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
        };

        semi_colon {
            bindings = <&kp SEMI>;
            key-positions = <46 47>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <44 30>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <45 31>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 31>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";
            bindings = <
&trans  &trans  &trans  &trans  &trans     &trans                                &trans     &trans     &trans     &trans   &trans    &trans
&trans  &kp Q   &kp W   &kp E   &kp R      &kp T                                 &kp Y      &kp U      &kp I      &kp O    &kp P     &trans
&trans  &kp A   &kp S   &kp D   &kp F      &kp G                                 &kp H      &kp J      &kp K      &kp L    &kp SQT   &trans
&trans  &kp Z   &kp X   &kp C   &kp V      &kp B        &kp C_PP    &kp C_SLEEP  &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH  &trans
                &trans  &trans  &kp LCTRL  &lt 1 SPACE  &kp LALT    &kp RSHFT    &lt 2 RET  &kp RMETA  &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &scroll_up_down>;
        };

        lower_layer {
            display-name = "lower";
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                    &trans           &trans     &trans     &trans       &trans  &trans
&trans  &trans   &kp N7  &kp N8  &kp N9  &trans                    &kp LG(LS(TAB))  &trans     &trans     &kp LG(TAB)  &trans  &trans
&trans  &kp DOT  &kp N4  &kp N5  &kp N6  &trans                    &kp LEFT         &kp DOWN   &kp UP     &kp RIGHT    &trans  &trans
&trans  &kp N0   &kp N1  &kp N2  &kp N3  &trans  &trans    &trans  &kp HOME         &kp PG_DN  &kp PG_UP  &kp END      &trans  &trans
                 &trans  &trans  &trans  &trans  &trans    &trans  &trans           &trans     &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        upper_layer {
            display-name = "upper";
            bindings = <
&trans  &trans     &trans    &trans    &trans     &trans                    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp CARET  &kp STAR  &kp EXCL  &kp MINUS  &trans                    &trans  &kp COLON  &kp EQUAL  &kp AMPS  &kp DLLR  &trans
&trans  &kp PIPE   &kp LBRC  &kt RBRC  &kp PLUS   &trans                    &trans  &kp GRAVE  &kp LPAR   &kp RPAR  &kp SEMI  &trans
&trans  &kp BSLH   &kp LBKT  &kp RBKT  &kp UNDER  &trans  &trans    &trans  &trans  &kp PRCNT  &kp LT     &kp GT    &kp FSLH  &trans
                   &trans    &trans    &trans     &trans  &trans    &trans  &trans  &trans     &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        adjust_layer {
            display-name = "adjust";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                     &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10                    &bt BT_SEL 4  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11                    &bt BT_PRV    &trans        &trans        &bt BT_NXT    &trans        &trans
&trans  &trans  &kt F1  &kp F2  &kp F3  &kp F12  &trans    &trans  &bt BT_CLR    &trans        &trans        &trans        &trans        &trans
                &trans  &trans  &trans  &trans   &trans    &trans  &trans        &trans        &trans        &trans
            >;
        };
    };
};
