// Editor: https://nickcoutsos.github.io/keymap-editor/
// Reference: https://github.com/urob/zmk-config

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/sofle.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

/* Global defaults */

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/* Home Row Mods */
// Hack: Make HRM combos tap-only (cf, ZMK issue #544).

#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Encoders */

&left_encoder { steps = <60>; };

&right_encoder { steps = <60>; };

&sensors { triggers-per-rotation = <30>; };

/* Keymap */

/ {
    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        /* Home Row Mods */

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <53 54 55 56 44 30 18 45 31 19 20 32 46 47 33 21 48 34 22 57 52>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <54 53 55 56 57 41 29 17 40 28 16 39 27 15 38 26 14 37 25 13 52>;
        };

        // Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp COMMA>, <&comma_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER_MORPH";
            bindings = <&kp SEMI>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.

        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_INNER_MORPH";
            bindings = <&kp COLON>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp DOT>, <&dot_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: qmark | Shift + tap: excl.

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QEXCL";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: left/right parenthesis | Shft + tap: less-than/greater-than.

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LPAR>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.

        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPC_MORPH";
            bindings = <&kp SPACE>, <&dot_spc>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&spc_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        // Tap: BT_CLR | Shift + tap: BT_CLR_ALL.

        bt_clr: bt_clr {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_CLR";
            bindings = <&bt BT_CLR>, <&bt BT_CLR_ALL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <5 4>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <27 32>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        esc {
            bindings = <&hrm_l LS(LALT) ESC>;
            key-positions = <26 27>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <38 39>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <39 40>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        lbkt_lbrc {
            bindings = <&hrm_r RS(LCTRL) LBKT>;
            key-positions = <31 32>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        rbkt_rbrc {
            bindings = <&hrm_r RS(LALT) RBKT>;
            key-positions = <32 33>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        lpar_lt {
            bindings = <&lpar_lt>;
            key-positions = <45 46>;
        };

        rpar_gt {
            bindings = <&rpar_gt>;
            key-positions = <46 47>;
        };
    };

    macros {
        dot_spc: dot_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            label = "DOT_SPC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";
            bindings = <
&trans  &trans          &trans         &trans           &trans          &trans                               &trans     &trans          &trans           &trans         &trans            &trans
&trans  &kp Q           &kp W          &kp E            &kp R           &kp T                                &kp Y      &kp U           &kp I            &kp O          &kp P             &trans
&trans  &hrm_l LMETA A  &hrm_l LALT S  &hrm_l LSHIFT D  &hrm_l LCTRL F  &kp G                                &kp H      &hrm_r LCTRL J  &hrm_r RSHIFT K  &hrm_r LALT L  &hrm_r LMETA SQT  &trans
&trans  &kp Z           &kp X          &kp C            &kp V           &kp B    &kp C_PP       &kp C_SLEEP  &kp N      &kp M           &comma_morph     &dot_morph     &qexcl            &trans
                        &trans         &trans           &trans          &kp ESC  &lt_spc 1 0    &lt 2 ENTER  &kp LSHFT  &trans          &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &scroll_up_down>;
        };

        lower_layer {
            display-name = "lower";
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                       &trans           &trans     &trans     &trans       &trans  &trans
&trans  &trans   &kp N7  &kp N8  &kp N9  &trans                       &kp LG(LS(TAB))  &kp BSPC   &kp DEL    &kp LG(TAB)  &trans  &trans
&trans  &kp DOT  &kp N4  &kp N5  &kp N6  &kp ENTER                    &kp LEFT         &kp DOWN   &kp UP     &kp RIGHT    &trans  &trans
&trans  &kp N0   &kp N1  &kp N2  &kp N3  &trans     &trans    &trans  &kp HOME         &kp PG_DN  &kp PG_UP  &kp END      &trans  &trans
                 &trans  &trans  &trans  &trans     &trans    &trans  &trans           &trans     &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        upper_layer {
            display-name = "upper";
            bindings = <
&trans  &trans     &trans    &trans    &trans     &trans                    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp CARET  &kp STAR  &kp EXCL  &kp MINUS  &trans                    &trans  &kp COLON  &kp EQUAL  &kp AMPS  &kp DLLR  &trans
&trans  &kp PIPE   &kp LBRC  &kp RBRC  &kp PLUS   &trans                    &trans  &kp GRAVE  &kp LPAR   &kp RPAR  &kp SEMI  &trans
&trans  &kp BSLH   &kp LBKT  &kp RBKT  &kp UNDER  &trans  &trans    &trans  &trans  &kp PRCNT  &kp LT     &kp GT    &kp FSLH  &trans
                   &trans    &trans    &trans     &trans  &trans    &trans  &trans  &trans     &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll_up_down>;
        };

        adjust_layer {
            display-name = "adjust";
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                    &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans                    &bt BT_PRV    &trans        &trans        &bt BT_NXT    &trans        &trans
&trans  &kp F10  &kt F1  &kp F2  &kp F3  &trans  &trans    &trans  &trans        &trans        &trans        &trans        &bt_clr       &trans
                 &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans
            >;
        };
    };
};
