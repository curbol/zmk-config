//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
// Editor: https://nickcoutsos.github.io/keymap-editor/
// Reference: https://github.com/urob/zmk-config

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Global defaults */

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/ {
    behaviors {
        /* Home Row Mods */

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <32 33 34 35 36 37 5 6 17 7 8 9 31 15 16 26 27 28 18 29 19 30>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <32 33 34 35 36 37 25 24 14 13 23 12 4 3 2 1 11 22 21 10 0 20>;
        };

        // Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp COMMA>, <&comma_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER_MORPH";
            bindings = <&kp SEMI>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp DOT>, <&dot_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_INNER_MORPH";
            bindings = <&kp COLON>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // Tap: qmark | Shift + tap: excl.

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QEXCL";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // Tap: left/right parenthesis | Shft + tap: less-than/greater-than.

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: bspc | Shift + tap: esc

        bksp_esc_morph: bksp_esc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_ESC_MORPH";
            bindings = <&kp BSPC>, <&kp ESC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // Tap: BT_CLR | Shift + tap: BT_CLR_ALL.

        bt_clr: bt_clr {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_CLR";
            bindings = <&bt BT_CLR>, <&bt BT_CLR_ALL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: sticky-shift | Shift + tap: caps_word | Hold: shift.

        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_SHIFT";
            bindings = <&kp>, <&magic_shift_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        magic_shift_tap: magic_shift_tap {
            compatible = "zmk,behavior-mod-morph";
            label = "MAGIC_SHIFT_TAP";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        func_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };

        game_func {
            if-layers = <4 2>;
            then-layer = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "base";
            bindings = <
           &kp B           &kp L          &kp D                  &kp W            &kp Z          &kp MINUS    &kp F                 &kp O                      &kp U          &kp J
           &hrm_l LMETA N  &hrm_l LALT R  &hrm_l LSHFT T         &hrm_l LCTRL S   &kp G          &kp Y        &hrm_r LCTRL H        &hrm_r RSHFT A             &hrm_r LALT E  &hrm_r LMETA I
&kp GRAVE  &kp Q           &kp X          &kp M                  &kp C            &kp V          &kp K        &kp P                 &comma_morph               &dot_morph     &qexcl          &kp SQT
                                          &mt LS(LA(LCTRL)) DEL  &bksp_esc_morph  &lt 1 SPACE    &lt 2 ENTER  &magic_shift LSHFT 0  &mt LS(LA(LC(LMETA))) TAB
            >;
        };

        symbol_layer {
            display-name = "symbol";
            bindings = <
           &kp AT_SIGN        &kp AMPERSAND     &kp POUND          &kp PERCENT        &trans    &trans  &kp CARET           &kp TILDE           &kp DOLLAR        &kp PIPE
           &hrm_l LMETA BSLH  &hrm_l LALT STAR  &hrm_l LSHFT LBKT  &hrm_l LCTRL RBKT  &trans    &trans  &hrm_r LCTRL MINUS  &hrm_r RSHFT EQUAL  &hrm_r LALT PLUS  &hrm_r LMETA FSLH
&kp TILDE  &lpar_lt           &kp LEFT_BRACE    &kp RIGHT_BRACE    &rpar_gt           &trans    &trans  &kp UNDERSCORE      &kp LESS_THAN       &kp GREATER_THAN  &kp EXCLAMATION    &kp DOUBLE_QUOTES
                                                &trans             &trans             &trans    &trans  &trans              &trans
            >;
        };

        numnav_layer {
            display-name = "numnav";
            bindings = <
        &trans           &kp N7          &kp N8           &kp N9           &trans    &kp C_VOL_UP  &kp HOME  &kp UP    &kp END    &kp PG_UP
        &hrm_l LMETA N0  &hrm_l LALT N4  &hrm_l LSHFT N5  &hrm_l LCTRL N6  &trans    &kp C_VOL_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN
&trans  &trans           &kp N1          &kp N2           &kp N3           &trans    &kp C_PP      &trans    &trans    &trans     &trans     &tog 3
                                         &trans           &trans           &trans    &trans        &trans    &trans
            >;
        };

        game_layer {
            display-name = "game";
            bindings = <
       &kp TAB    &kp Q  &kp W     &kp E    &kp R        &trans  &trans  &trans  &trans  &trans
       &kp LSHFT  &kp A  &kp S     &kp D    &kp F        &trans  &trans  &trans  &trans  &trans
&kp M  &kp LCTRL  &kp Z  &kp X     &kp C    &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                         &kp LALT  &lt 4 G  &kp SPACE    &trans  &trans  &trans
            >;
        };

        game2_layer {
            display-name = "game2";
            bindings = <
         &kp I  &kp N7  &kp N8  &kp N9  &kp T     &trans  &trans  &trans  &trans  &trans
         &kp N  &kp N4  &kp N5  &kp N6  &kp G     &trans  &trans  &trans  &trans  &trans
&kp ESC  &kp J  &kp N1  &kp N2  &kp N3  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        function_layer {
            display-name = "func";
            bindings = <
        &trans  &kp F7  &kp F8  &kp F9  &kp F10    &bt_clr       &trans  &trans  &trans  &trans
        &trans  &kp F4  &kp F5  &kp F6  &kp F11    &bt BT_SEL 0  &trans  &trans  &trans  &trans
&trans  &trans  &kt F1  &kp F2  &kp F3  &kp F12    &bt BT_SEL 1  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans        &trans  &trans
            >;
        };
    };
};
